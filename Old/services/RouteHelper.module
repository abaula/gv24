<?php
/**
 * Created by JetBrains PhpStorm.
 * User: Anton
 * Date: 22.04.15
 * Time: 13:33
 * To change this template use File | Settings | File Templates.
 */

class TaskInfo
{
    public $id;
    public $name;

    public $cityId1;
    public $city1Name;
    public $city1Longitude;
    public $city1Latitude;

    public $cityId2;
    public $city2Name;
    public $city2Longitude;
    public $city2Latitude;

    public $type;
    public $weight;
    public $value;
    public $distance;
    public $cost;
    public $readyDate;

    function __construct($id, $name, $cityId1, $city1Name, $city1Longitude, $city1Latitude, $cityId2, $city2Name, $city2Longitude, $city2Latitude, $type, $distance, $value, $weight, $cost, $readyDate)
    {
        $this->id = $id;
        $this->name = $name;

        $this->cityId1 = $cityId1;
        $this->city1Name = $city1Name;
        $this->city1Longitude = $city1Longitude;
        $this->city1Latitude = $city1Latitude;

        $this->cityId2 = $cityId2;
        $this->city2Name = $city2Name;
        $this->city2Longitude = $city2Longitude;
        $this->city2Latitude = $city2Latitude;

        $this->type = $type;
        $this->distance = $distance;
        $this->value = $value;
        $this->weight = $weight;
        $this->cost = $cost;
        $this->readyDate = $readyDate;
    }
}


class RoutePointType
{
    const StartPoint = 0;
    const FirstPoint = 1;
    const SecondPoint = 2;
    const WayBackPoint = 3;
}


class RoutePoint
{
    public $id;
    public $cargoSelectedId;
    public $cityId;
    public $cityName;
    public $distance;
    public $typeId;
    public $orderNum;

    function __construct($id, $cargoSelectedId, $cityId, $cityName, $distance, $typeId, $orderNum)
    {
        $this->cargoSelectedId = $cargoSelectedId;
        $this->cityId = $cityId;
        $this->cityName = $cityName;
        $this->distance = $distance;
        $this->id = $id;
        $this->typeId = $typeId;
        $this->orderNum = $orderNum;
    }
}


class RouteHelper
{
    private static $_routeId = null;


    public static function GetRouteId($accountId, $userTokenId, $db)
    {
        if(null == self::$_routeId)
        {

            if(is_null($accountId))
                $where_sql_definition = $db->parse(' user_token_id = ?i ', $userTokenId);
            else
                $where_sql_definition = $db->parse(' account_id = ?i ', $accountId);

            $sql = 'SELECT id FROM route WHERE ?p';

            $route_id = $db->getOne($sql, $where_sql_definition);

            self::$_routeId = (false == $route_id) ? 0 : $route_id;
        }

        return self::$_routeId;
    }

    public static function CreateRoute($accountId, $userTokenId, $db)
    {
        // создаём запись маршрута в БД
        if(is_null($accountId))
            $insert_sql_definition = $db->parse(' null, ?i ', $userTokenId);
        else
            $insert_sql_definition = $db->parse(' ?i, null ', $accountId);


        $sql = 'INSERT INTO route
                    (name, account_id, user_token_id)
                    VALUES
                    (\'Маршрут по умолчанию\', ?p)';

        $db->query($sql, $insert_sql_definition);
        $route_id = $db->insertId();

        return $route_id;
    }

    public static function ClearRoute($routeId, $db)
    {
        $sql = 'DELETE FROM route_point WHERE route_id = ?i';
        $db->query($sql, $routeId);
    }

    public static function CheckCargoIdsExistInRoute($ids, &$routeData)
    {
        foreach($routeData as $routePoint)
        {
            foreach($ids as $cargoId)
            {
                if($cargoId == $routePoint->cargoSelectedId)
                    return true;
            }
        }

        return false;
    }


    // возвращает последую точку в маршруте, за исключением обратного пути
    public static function GetLastPointFromRoute(&$routeData)
    {
        $lastPoint = null;

        if(0 < count($routeData))
        {
            $lastPoint = end($routeData);

            if(RoutePointType::WayBackPoint == $lastPoint->typeId)
            {
                $lastPoint = prev($routeData);

                if(! $lastPoint)
                    $lastPoint = null;
            }

            if (null != $lastPoint
                    && RoutePointType::StartPoint == $lastPoint->typeId)
            {
                $lastPoint = null;
            }

            // возвращаем указатель на начало массива
            reset($routeData);
        }


        return $lastPoint;
    }


    // возвращает последую точку в маршруте, за исключением обратного пути
    public static function GetWayBackPointFromRoute(&$routeData)
    {
        $lastPoint = null;

        if(0 < count($routeData))
        {
            $lastPoint = end($routeData);

            if(RoutePointType::WayBackPoint != $lastPoint->typeId)
            {
                $lastPoint = null;
            }

            // возвращаем указатель на начало массива
            reset($routeData);
        }

        return $lastPoint;
    }

    public static function CreateRoutePoint($routeId, $cargoSelectedId, $cityId, $distance, $typeId, $orderNum, $db)
    {
        // ... шаблон запроса
        $sql = 'INSERT INTO route_point (route_id, cargo_selected_id, city_id, distance, type_id, order_num)
                        VALUES (?i, ?i, ?i, ?i, ?i, ?i)';

        $db->query($sql, $routeId, $cargoSelectedId, $cityId, $distance, $typeId, $orderNum);

        return $db->insertId();
    }

    public static function DeleteRoutePoint($routeId, $routePointId, $db)
    {
        $sql = 'DELETE FROM route_point WHERE route_id = ?i AND id = ?i';
        $db->query($sql, $routeId, $routePointId);
    }

    public static function UpdateRoutePointDistanceAndOrderNumber($routePointId, $distance, $orderNumber, $db)
    {
        // ... шаблон запроса
        $sql = 'UPDATE route_point
                      SET  distance = ?i, order_num = ?i
                    WHERE id = ?i';

        $db->query($sql, $distance, $orderNumber, $routePointId);
    }


    public static function UpdateRoutePointDistance($routePointId, $distance, $db)
    {
        // ... шаблон запроса
        $sql = 'UPDATE route_point
                      SET  distance = ?i
                    WHERE id = ?i';

        $db->query($sql, $distance, $routePointId);
    }


    public static function UpdateRoutePointOrderNumber($routePointId, $orderNumber, $db)
    {
        // ... шаблон запроса
        $sql = 'UPDATE route_point
                      SET  order_num = ?i
                    WHERE id = ?i';

        $db->query($sql, $orderNumber, $routePointId);
    }

    /*
    public static function GetFirstRoutePointIdFromRoute($routeId, $db)
    {
        $sql = 'SELECT id FROM route_point
                    WHERE route_id = ?i
                    ORDER BY order_num LIMIT 1';

        $route_point_id = $db->getOne($sql, $routeId);

        return $route_point_id;
    }
    */

    /*
    public static function DeleteRoutePointFromRouteByCargoSelectedId($routeId, $cargoSelectedIds, $db)
    {
        $idsInSqlString = implode(',', $cargoSelectedIds);

        $sql = 'DELETE FROM route_point WHERE route_id = ?i AND cargo_selected_id IN (?p)';

        $db->query($sql, $routeId, $idsInSqlString);
    }
    */

    public static function DeleteRoutePointFromRoute($routePointsToDelete, $db)
    {
        $routePointIds = array();

        foreach($routePointsToDelete as $routePoint)
        {
            array_push($routePointIds, $routePoint->id);
        }


        $idsInSqlString = implode(',', $routePointIds);

        $sql = 'DELETE FROM route_point WHERE id IN (?p)';

        $db->query($sql, $idsInSqlString);
    }



    public static function GetRoutePointsFromRouteByCargoId($cargoSelectedIds, &$routeData)
    {
        $result = array();


        foreach($routeData as $routePoint)
        {
            foreach($cargoSelectedIds as $cargoId)
            {
                if($cargoId == $routePoint->cargoSelectedId)
                {
                    array_push($result, $routePoint);
                }
            }
        }

        return $result;
    }



    public static function AreAllPointsInRoute($routeId, &$pointIds, $db)
    {

        $sql = 'SELECT count(id)
                FROM route_point
                WHERE route_id = ?i
                    AND id IN (?p)';

        $sqlInString = implode(',', $pointIds);
        $pointCount = $db->getOne($sql, $routeId, $sqlInString);

        if($pointCount == count($pointIds))
            return true;

        return false;
    }


    public static function GetRouteData($routeId, $db)
    {
        $list = array();

        $sql = 'SELECT RP.id, RP.cargo_selected_id, RP.city_id, GC.name AS city_name, RP.distance, RP.type_id, RP.order_num
                FROM route_point RP
                  INNER JOIN geocities GC
                    ON GC.id = RP.city_id
                WHERE RP.route_id = ?i
                ORDER BY RP.order_num';

        $result = $db->query($sql, $routeId);

        if(0 < $db->numRows($result))
        {
            while($row = $db->fetch($result))
            {
                $entry = new RoutePoint
                (
                    $row['id'], $row['cargo_selected_id'], $row['city_id'], $row['city_name'], $row['distance'], $row['type_id'], $row['order_num']
                );

                $list[$entry->id] = $entry;
            }
        }

        return $list;
    }


    // возвращает TaskInfo[]
    public static function GetCargoInRouteData($routeId, $db)
    {
        $list = array();

        $sql = 'SELECT DISTINCT C.id, C.name,
                          C.city1_id, GC1.name as city1_name, (GC1.latitude / 10000000) as city1_latitude, (GC1.longitude / 10000000) as city1_longitude,
                          C.city2_id, GC2.name as city2_name, (GC2.latitude / 10000000) as city2_latitude, (GC2.longitude / 10000000) as city2_longitude,
                          CT.name AS type, C.weight, C.value, C.distance, C.cost, C.ready_date
                    FROM cargo C
                        INNER JOIN geocities GC1
                          ON GC1.id = C.city1_id
                        INNER JOIN geocities GC2
                          ON GC2.id = C.city2_id
                        INNER JOIN cargo_type CT
                            ON CT.id = C.cargo_type_id
                        INNER JOIN cargo_selected CS
                            ON CS.cargo_id = C.id
                        INNER JOIN route_point RP
                            ON RP.cargo_selected_id = CS.id
                              AND RP.route_id = ?i
                    WHERE C.is_deleted = 0';

        $result = $db->query($sql, $routeId);

        if(0 < $db->numRows($result))
        {
            while($row = $db->fetch($result))
            {
                $entry = new TaskInfo
                (
                    $row['id'], $row['name'],
                    $row['city1_id'], $row['city1_name'], $row['city1_longitude'], $row['city1_latitude'],
                    $row['city2_id'], $row['city2_name'], $row['city2_longitude'], $row['city2_latitude'],
                    $row['type'], $row['distance'], $row['value'], $row['weight'], $row['cost'], $row['ready_date']
                );

                $list[$entry->id] = $entry;
            }
        }

        return $list;
    }

    public static function GetUniqueCitiesIdsFromRoutePointsArray(&$routePoints)
    {
        $arr_cities = array();

        foreach($routePoints as $routePoint)
        {
            $arr_cities[$routePoint->cityId] = $routePoint->cityId;
        }


        return $arr_cities;
    }


    public static function GetUniqueStartCitiesFromRoutePointsArray(&$routePoints)
    {
        $arr_cities = array();

        foreach($routePoints as $routePoint)
        {
            if(RoutePointType::FirstPoint == $routePoint->typeId)
            {
                $cityInfo = new AjaxCityShortInfo($routePoint->cityId, $routePoint->cityName);
                $arr_cities[$routePoint->cityId] = $cityInfo;
            }
        }

        return array_values($arr_cities);
    }

    public static function GetUniqueStartCitiesFromAjaxRoutePointsArray(&$routePoints)
    {
        $arr_cities = array();

        foreach($routePoints as $routePoint)
        {
            if(0 < $routePoint->weight)
            {
                $cityInfo = new AjaxCityShortInfo($routePoint->cityId, $routePoint->cityName);
                $arr_cities[$routePoint->cityId] = $cityInfo;
            }
        }

        return array_values($arr_cities);
    }


    public static function GetUniqueStartCitiesFromTasksArray(&$tasks)
    {
        $arr_cities = array();

        foreach($tasks as $task)
        {
            $cityInfo = new AjaxCityShortInfo($task->city1Id, $task->city1);
            $arr_cities[$task->city1Id] = $cityInfo;
        }


        return array_values($arr_cities);
    }


    public static function CheckIfRoutePointPositionInArrayIsCorrect($routePointId, $afterRoutePointId, &$routePoints)
    {
        $firstPointOfRoute = $routePoints[key($routePoints)];
        $routePointToInsert = $routePoints[$routePointId];
        $isFirstPointOfPair = (RoutePointType::FirstPoint == $routePointToInsert->typeId);

        // проверяем, что позиция вставки - это не обратный путь маршрута
        if( ! is_null($afterRoutePointId))
        {
            $afterRoutePoint = $routePoints[$afterRoutePointId];

            // если cargoSelectedId = 0, и это не первая точка в маршруте,
            // значит точка вставки - обратный путь
            if( 1 > $afterRoutePoint->cargoSelectedId && $afterRoutePoint->id != $firstPointOfRoute->id )
                return false;
        }


        // если переносим точку в начало, то это должна быть начальная точка маршрута
        // первая точка маршрута не должна быть с пустым заданием
        if( is_null($afterRoutePointId) )
        {
            if( 1 > $firstPointOfRoute->cargoSelectedId )
                return false;

            return $isFirstPointOfPair;
        }


        // проверяем другие случаи
        foreach($routePoints as $routePoint)
        {
            // нашли вторую точку одного и того же задания на перевозку. Нашли точку раньше, чем дошли до позиции вставки
            if($routePointToInsert->cargoSelectedId == $routePoint->cargoSelectedId && $routePointToInsert->id != $routePoint->id)
            {
                // принимаем решение: если вторая точка является начальной точкой маршрута, то всё нормально, иначе очерёдность меняется местами и это неправильно.
                return ! $isFirstPointOfPair;
            }

            // дошли до позиции вставки
            if($routePoint->id == $afterRoutePointId)
            {
                // принимаем решение: если вставляемая точка это первая точка маршрута, то всё нормально, иначе очерёдность меняется местами и это неправильно.
                return $isFirstPointOfPair;
            }
        }


        return false;
    }


    public static function ChangeRoutePointPositionInArray($routePointId, $afterRoutePointId, &$routePoints)
    {
        $routePointToInsert = $routePoints[$routePointId];

        $list = array();

        if(is_null($afterRoutePointId))
            array_push($list, $routePointToInsert);

        foreach($routePoints as $routePoint)
        {
            if($routePoint->id == $routePointId)
                continue;

            array_push($list, $routePoint);

            if($routePoint->id == $afterRoutePointId)
            {
                array_push($list, $routePointToInsert);
            }
        }

        return $list;
    }

}