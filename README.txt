
============== ОПИСАНИЕ СЦЕНАРИЯ ИСПОЛЬЗОВАНИЯ БИБЛИОТЕКИ ДЛЯ ПОСТРОЕНИЯ МАРШРУТА ================

1) Пользователь работает со списком заданий на перевозку
	1.1) прикладная процедура формирует список маршрутов в виде массива объектов Route.RouteTask
	1.2) прикладная процедура добавляет задание на перевозку в список
	1.3) прикладная процедура удаляет задание на перевозку из списка
2) Пользователь уточняет ограничительные параметры маршрута
	2.1) прикладная процедура сохраняет, изменяет ограничительные параметры в объекте Route.RouteRestrictions
3) Пользователь отдаёт команду на расчёт маршрута
	3.1) прикладная процедура создаёт объект Route.RouteTaskList
	3.2) прикладная процедура загружает массив объектов Route.RouteTask в объект Route.RouteTaskList через метод "Route.RouteTaskList.addRouteTasks(...)"
	3.3) объект Route.RouteTaskList формирует список вершин и связывает вершины с заданиями на перевозку вызовом метода "Route.RouteTask.bindVerticesToThisTask(...)"
	3.4) прикладная процедура получает из объекта Route.RouteTaskList список вершин в виде массива объектов Graph.GVertex
	3.5) прикладная процедура получает с сервера все рёбра для полученного списка вершин - массива объектов Graph.GVertex
	3.6) прикладная процедура формирует из полученных данных массив объектов Graph.GEdge
	3.7) прикладная процедура создаёт новый граф - объект Graph.UndirectedGraph
	3.8) прикладная процедура инициализирует объект Graph.UndirectedGraph массивами вершин (Graph.GVertex) и рёбер (Graph.GEdge) методом Graph.UndirectedGraph.init(...)
	3.9) прикладная процедура создаёт новый объект Calculator.RouteCalculator и передаёт в конструктор созданные ранее объекты RouteTaskList, RouteRestrictions, UndirectedGraph
	3.10) прикладная процедура запускает расчёт маршрута, для чего вызывает метод "Calculator.RouteCalculator.calculateRoute(...)", передавая в него объект Graph.GVertex с которого начинается поиск пути
	3.11) метод "Calculator.RouteCalculator.calculateRoute(...)" отбирает 2 наиболее эффективных маршрута - с учётом обратного пути и без учёта обратного пути
	3.12) рассчитанные маршруты можно получить методами объекта "Calculator.RouteCalculator" - "getRoute" и "getRouteWithWayBack"
	3.13) прикладная процедура отображает для пользователя полученные данные маршрута из объекта Route.Route

====================================================================================================

