<?php
/**
 * Created by JetBrains PhpStorm.
 * User: Anton
 * Date: 22.04.15
 * Time: 13:33
 * To change this template use File | Settings | File Templates.
 */



class RoutePoint
{
    public $id;
    public $cargoSelectedId;
    public $cityId;
    public $distance;
    public $isFirstPointOfPair;
    public $orderNum;

    function __construct($id, $cargoSelectedId, $cityId, $distance, $isFirstPointOfPair, $orderNum)
    {
        $this->cargoSelectedId = $cargoSelectedId;
        $this->cityId = $cityId;
        $this->distance = $distance;
        $this->id = $id;
        $this->isFirstPointOfPair = $isFirstPointOfPair;
        $this->orderNum = $orderNum;
    }
}


class RouteHelper
{

    public static function GetRouteId($accountId, $userTokenId, $db)
    {

        if(is_null($accountId))
            $where_sql_definition = $db->parse(' user_token_id = ?i ', $userTokenId);
        else
            $where_sql_definition = $db->parse(' account_id = ?i ', $accountId);

        $sql = 'SELECT id FROM route WHERE ?p';

        $route_id = $db->getOne($sql, $where_sql_definition);

        return $route_id;
    }

    public static function CreateRoute($accountId, $userTokenId, $db)
    {
        // создаём запись маршрута в БД
        if(is_null($accountId))
            $insert_sql_definition = $db->parse(' null, ?i ', $userTokenId);
        else
            $insert_sql_definition = $db->parse(' ?i, null ', $accountId);


        $sql = 'INSERT INTO route
                    (name, account_id, user_token_id)
                    VALUES
                    (\'Маршрут по умолчанию\', ?p)';

        $db->query($sql, $insert_sql_definition);
        $route_id = $db->insertId();

        return $route_id;
    }

    public static function AreAllPointsInRoute($routeId, &$pointIds, $db)
    {

        $sql = 'SELECT count(id)
                FROM route_point
                WHERE route_id = ?i
                    AND id IN (?p)';

        $sqlInString = implode(',', $pointIds);
        $pointCount = $db->getOne($sql, $routeId, $sqlInString);

        if($pointCount == count($pointIds))
            return true;

        return false;
    }


    public static function GetRouteData($routeId, $db)
    {
        $list = array();

        $sql = 'SELECT id, cargo_selected_id, city_id, distance, is_first_point_of_pair, order_num
                FROM route_point
                WHERE route_id = ?i
                ORDER BY order_num';

        $result = $db->query($sql, $routeId);

        if(0 < $db->numRows($result))
        {
            while($row = $db->fetch($result))
            {
                $entry = new RoutePoint
                (
                    $row['id'], $row['cargo_selected_id'], $row['city_id'], $row['distance'], $row['is_first_point_of_pair'], $row['order_num']
                );

                $list[$entry->id] = $entry;
            }
        }

        return $list;
    }

    public static function GetUniqueCitiesFromRoutePointsArray(&$routePoints)
    {
        $arr_cities = array();

        foreach($routePoints as $routePoint)
        {
            $arr_cities[$routePoint->cityId] = $routePoint->cityId;
        }


        return $arr_cities;
    }


    public static function CheckRoutePointPositionInArray($routePointToInsert, $routePointToInsertAfter, &$routePoints)
    {

    }

    public static function ChangeRoutePointPositionInArray($routePointToInsert, $routePointToInsertAfter, &$routePoints)
    {
        $list = array();

        foreach($routePoints as $routePoint)
        {
            if($routePoint->id == $routePointToInsert->id)
                continue;

            array_push($list, $routePoint);

            if($routePoint->id == $routePointToInsertAfter->id)
            {
                array_push($list, $routePointToInsert);
            }
        }

        return $list;
    }

}