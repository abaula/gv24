<?php
/**
 * Created by JetBrains PhpStorm.
 * User: Anton
 * Date: 04.04.15
 * Time: 22:27
 * To change this template use File | Settings | File Templates.
 */
require_once("WebServBase.module");
require_once("Headers.module");
require_once("Contract.module");
require_once("GeoRouteHelper.module");
require_once("RouteHelper.module");


class RouteWebService extends WebServBase
{

    public function onGet($args)
    {

        /*
         * Возвращаем список выбранных задач для пользователя
         *
         * */


        $accountId = null;
        $userTokenId = null;
        CurrentUser::FillUserIdentities($accountId, $userTokenId);

        // возвращаем объекты AjaxTask
        $db = SqlFactory::getSql();

        try
        {
            $page_arg = intval($args[0]);
            $page = $page_arg > 0 ? $page_arg : 1;

            // TODO Сделать проверку правильности номера страницы полученного с клиента

            $limit = 20;
            $offset = ($page - 1) * $limit;
            $allRowCount = 0;

            if(is_null($accountId))
                $where_sql_definition = $db->parse(' CS.user_token_id = ?i ', $userTokenId);
            else
                $where_sql_definition = $db->parse(' CS.account_id = ?i ', $accountId);


            // получаем количество записей удовлетворяющих условию фильтрации
            $sql = 'SELECT count(C.id)
                    FROM cargo C
                      INNER JOIN cargo_selected CS
                            ON CS.cargo_id = C.id
                              AND ?p
                    WHERE C.is_deleted = 0';

            $allRowCount = $db->getOne($sql, $where_sql_definition);


            $sql = 'SELECT DISTINCT C.id, C.city1_id, GC1.name AS city1, GC2.name AS city2, CT.name AS type,
                          C.weight, C.value, C.distance, C.cost, C.ready_date, CS.id AS selectedId, RP.cargo_selected_id AS route_point_cargo_selected_id
                    FROM cargo C
                        INNER JOIN geocities GC1
                            ON GC1.id = C.city1_id
                        INNER JOIN geocities GC2
                            ON GC2.id = C.city2_id
                        INNER JOIN cargo_type CT
                            ON CT.id = C.cargo_type_id
                        INNER JOIN cargo_selected CS
                            ON CS.cargo_id = C.id
                              AND ?p
                        LEFT OUTER JOIN route_point RP
                            ON RP.cargo_selected_id = CS.id
                    WHERE C.is_deleted = 0';

            $result = $db->query($sql, $where_sql_definition);
            $arr = array();

            if(0 < $db->numRows($result))
            {
                while($row = $db->fetch($result))
                {
                    $rusReadyDate = Validators::convertMySqlDate2RusDate($row['ready_date']);
                    $selected = intval($row['route_point_cargo_selected_id']) > 0;

                    $entry = new AjaxTask
                    (
                        $row['id'], $row['city1_id'], $row['city1'], $row['city2'], $row['type'], $row['distance'], $row['value'], $row['weight'], $row['cost'], $rusReadyDate, $selected, $row['selectedId']
                    );

                    array_push($arr, $entry);
                }
            }

            // на данный момент информацию о страницах не заполняем, т.к. возвращаем все данные
            $taskListData = new AjaxTaskList();
            $taskListData->offset = $offset;
            $taskListData->limit = $limit;
            $taskListData->allRowCount = $allRowCount;
            $taskListData->page = $page;
            $taskListData->tasks = $arr;

            // получаем данные маршрута
            $routePointList = CalculateRouteWebService::GetRouteData($accountId, $userTokenId, $db);

            // получаем список городов для выбранных задач
            $startCities = RouteHelper::GetUniqueStartCitiesFromTasksArray($taskListData->tasks);
            $startCitiesList = new AjaxCityList($startCities);

            // получаем список городов для построенного маршрута
            $routeStartCities = RouteHelper::GetUniqueStartCitiesFromAjaxRoutePointsArray($routePointList->routePoints);
            $routeStartCitiesList = new AjaxCityList($routeStartCities);

            // подготавливаем данные для отправки клиенту
            $respData = new AjaxRoutePointListAndAjaxTaskList();
            $respData->ajaxTaskList = $taskListData;
            $respData->routePointList = $routePointList;
            $respData->startCitiesList = $startCitiesList;
            $respData->routeStartCitiesList = $routeStartCitiesList;

            $response = new AjaxServerResponse(200, '', '', $respData);
            sendHTTPStatus(200);
            header('Content-type: application/json');
            echo json_encode($response);

        }
        catch(Exception $ex)
        {
            Log::writeSqlExeption($db, $ex);
            $this->returnError(500, array(1));
        }

    }

    // Добавляем новую задачу в маршрут
    public function onPost($args, $data)
    {
        // $data = AjaxIdsList

        $idsInSqlString = implode(',', $data->ids);

        $accountId = null;
        $userTokenId = null;
        CurrentUser::FillUserIdentities($accountId, $userTokenId);


        $db = SqlFactory::getSql();

        try
        {
            if(is_null($accountId))
                $where_sql_definition = $db->parse(' AND CS.user_token_id = ?i ', $userTokenId);
            else
                $where_sql_definition = $db->parse(' AND CS.account_id = ?i ', $accountId);

            // 1. получаем уникальный список переданных грузов - страхуемся от неверных данных и дублей
            $sql = 'SELECT DISTINCT CS.id, CS.cargo_id, C.city1_id, C.city2_id
                    FROM cargo_selected CS
                        INNER JOIN cargo C
                            ON C.id = CS.cargo_id
                    WHERE CS.cargo_id IN (?p) ?p';

            $result = $db->query($sql, $idsInSqlString, $where_sql_definition);
            $arr_cargo = array();

            if(0 < $db->numRows($result))
            {
                // 2. модифицируем список переданных идентификаторов - вносим только корректные идентификаторы
                $data->ids = array();

                while($row = $db->fetch($result))
                {
                    array_push($data->ids, $row['cargo_id']);
                    $entry = new AjaxTaskShort($row['id'], $row['city1_id'], $row['city2_id']);
                    array_push($arr_cargo, $entry);
                }
            }

            // 3. если в результате не оказалось указанных грузов, то возвращаем ошибку
            if(1 > count($arr_cargo))
            {
                $this->returnError(400, array(1014), $data);
                return;
            }


            $max_order = 0;
            $lastCityId = 0;
            $wayBackPoint = null;
            $routeData = array();

            // 4. проверяем, создан ли маршрут и при необходимости создаём его
            $route_id = RouteHelper::GetRouteId($accountId, $userTokenId, $db);

            if(false == $route_id)
            {
                // создаём запись маршрута в БД
                $route_id = RouteHelper::CreateRoute($accountId, $userTokenId, $db);
            }
            else
            {
                // Получаем данные маршрута
                $routeData = RouteHelper::GetRouteData($route_id, $db);

                // 6. если указанные грузы уже есть в маршруте, то возвращаем ошибку
                $hasRepeats = RouteHelper::CheckCargoIdsExistInRoute($data->ids, $routeData);

                if($hasRepeats)
                {
                    $this->returnError(400, array(1015), $data);
                    return;
                }

                // 7. получаем данные последней точки в маршруте
                $lastPoint = RouteHelper::GetLastPointFromRoute($routeData);
                $wayBackPoint = RouteHelper::GetWayBackPointFromRoute($routeData);

                if(null != $lastPoint)
                {
                    $max_order = $lastPoint->orderNum;
                    $lastCityId = $lastPoint->cityId;
                }
            }


            // 8. получаем все расстояния между городами в добавляемых точках маршрута

            // 8.1 формируем список городов
            $arr_cities = array();
            array_push($arr_cities, $lastCityId);

            if(null != $wayBackPoint)
                array_push($arr_cities, $wayBackPoint->cityId);

            foreach ($arr_cargo as $cargo)
            {
                array_push($arr_cities, $cargo->city1);
                array_push($arr_cities, $cargo->city2);
            }

            // 8.2 получаем список дистанций между городами
            $distanceList = GeoRouteHelper::GetDistanceList($arr_cities, $db);

            // 9. вносим все задачи в маршрут
            $max_order++;

            for ($i = 0; $i < count($arr_cargo); $i++)
            {
                $cargo = $arr_cargo[$i];

                $distance = $distanceList->GetDistanceFromList($lastCityId, $cargo->city1);
                RouteHelper::CreateRoutePoint($route_id, $cargo->id, $cargo->city1, $distance, RoutePointType::FirstPoint, $max_order++, $db);

                $distance = $distanceList->GetDistanceFromList($cargo->city1, $cargo->city2);
                RouteHelper::CreateRoutePoint($route_id, $cargo->id, $cargo->city2, $distance, RoutePointType::SecondPoint, $max_order++, $db);

                $lastCityId = $cargo->city2;
            }

            // 10. если в маршруте есть обратный путь, то обновляем в нём дистанцию
            if(null != $wayBackPoint)
            {
                $wayBackDistance = $distanceList->GetDistanceFromList($wayBackPoint->cityId, $lastCityId);
                RouteHelper::UpdateRoutePointDistanceAndOrderNumber($wayBackPoint->id, $wayBackDistance, $max_order++, $db);
            }


            // 11. Получаем обновлённый маршрут
            $routePointList = CalculateRouteWebService::GetRouteData($accountId, $userTokenId, $db);

            // 12. получаем список городов для построенного маршрута
            $routeStartCities = RouteHelper::GetUniqueStartCitiesFromAjaxRoutePointsArray($routePointList->routePoints);
            $routeStartCitiesList = new AjaxCityList($routeStartCities);

            // 13. Возвращаем ответ клиенту
            $responseData = new AjaxIdsListAndRoutePointList();
            $responseData->idsList = $data;
            $responseData->routePointList = $routePointList;
            $responseData->routeStartCitiesList = $routeStartCitiesList;
            $response = new AjaxServerResponse(200, '', '', $responseData);
            sendHTTPStatus(200);
            header('Content-type: application/json');
            echo json_encode($response);

        }
        catch(Exception $ex)
        {
            Log::writeSqlExeption($db, $ex);
            $this->returnError(500, array(1), $data);
        }
    }

    public function onPut($args, $data)
    {
        // AjaxRoutePointPlace

        // TODO: редактируем порядок маршрутных точек

        $accountId = null;
        $userTokenId = null;
        CurrentUser::FillUserIdentities($accountId, $userTokenId);


        $db = SqlFactory::getSql();

        try
        {
            // 1. получаем id маршрута для пользователя
            $route_id = RouteHelper::GetRouteId($accountId, $userTokenId, $db);

            if(false == $route_id)
            {
                // возвращаем ошибку
                $this->returnError(400, array(1014), $data);
                return;
            }

            $routePointId = $data->routePointId;
            $afterRoutePointId = $data->afterRoutePointId;

            // 2. проверяем, что переданные точки маршрута принадлежат маршруту пользователя
            $pointIds = array();
            array_push($pointIds, $routePointId);

            if(intval($afterRoutePointId) > 0)
                array_push($pointIds, $afterRoutePointId);

            $arePointsInRoute = RouteHelper::AreAllPointsInRoute($route_id, $pointIds, $db);

            if(false == $arePointsInRoute)
            {
                // возвращаем ошибку
                $this->returnError(400, array(1014), $data);
                return;
            }

            // 3. получаем данные маршрута
            $routePoints = RouteHelper::GetRouteData($route_id, $db);


            // 4. проверяем, что новая позиция точки маршрута не меняет направление маршрута - первая точка маршрута в списке должна находиться перед второй точкой маршрута
            $isValidPosition = RouteHelper::CheckIfRoutePointPositionInArrayIsCorrect($routePointId, $afterRoutePointId, $routePoints);

            if(false == $isValidPosition)
            {
                // возвращаем ошибку
                $this->returnError(400, array(1016), $data);
                return;
            }

            // 5. меняем порядок точек маршрута
            $routePoints = RouteHelper::ChangeRoutePointPositionInArray($routePointId, $afterRoutePointId, $routePoints);

            // 6. пересчитываем дистанции маршрута
            // ... 6.1 получаем список дистанций между городами
            $arr_cities = RouteHelper::GetUniqueCitiesIdsFromRoutePointsArray($routePoints);
            $distanceList = GeoRouteHelper::GetDistanceList($arr_cities, $db);

            // ... 6.2 пересчитываем дистанции и вносим изменения в список точек маршрута
            $order_num = 1;
            $lastCityId = 0;

            foreach ($routePoints as $routePoint)
            {
                $distance = $distanceList->GetDistanceFromList($lastCityId, $routePoint->cityId);
                RouteHelper::UpdateRoutePointDistanceAndOrderNumber($routePoint->id, $distance, $order_num++, $db);

                $lastCityId = $routePoint->cityId;
            }


            // 7. Получаем обновлённый маршрут
            $routePointList = CalculateRouteWebService::GetRouteData($accountId, $userTokenId, $db);

            // 8. получаем список городов для построенного маршрута
            $routeStartCities = RouteHelper::GetUniqueStartCitiesFromAjaxRoutePointsArray($routePointList->routePoints);
            $routeStartCitiesList = new AjaxCityList($routeStartCities);

            // 9. возвращаем ответ клиенту
            $responseData = new AjaxRoutePointPlaceAndRoutePointList();
            $responseData->routePointPlace = $data;
            $responseData->routePointList = $routePointList;
            $responseData->routeStartCitiesList = $routeStartCitiesList;
            $response = new AjaxServerResponse(200, '', '', $responseData);
            sendHTTPStatus(200);
            header('Content-type: application/json');
            echo json_encode($response);

        }
        catch(Exception $ex)
        {
            Log::writeSqlExeption($db, $ex);
            $this->returnError(500, array(1), $data);
        }

    }

    // Удаляем задачу из маршрута
    public function onDelete($args, $data)
    {
        // $data = AjaxIdsList

        $accountId = null;
        $userTokenId = null;
        CurrentUser::FillUserIdentities($accountId, $userTokenId);


        $db = SqlFactory::getSql();

        try
        {
            // 1. получаем id маршрута для пользователя
            $route_id = RouteHelper::GetRouteId($accountId, $userTokenId, $db);

            if(false == $route_id)
            {
                // возвращаем ошибку
                $this->returnError(400, array(1014), $data);
                return;
            }

            // 2. получаем данные маршрута
            $routeData = RouteHelper::GetRouteData($route_id, $db);


            // 3. получаем идентификаторы удаляемых точек маршрута
            $routePointsToDelete = RouteHelper::GetRoutePointsFromRouteByCargoId($data->ids, $routeData);

            // 4. удаляем найденные точки из БД
            RouteHelper::DeleteRoutePointFromRoute($routePointsToDelete, $db);

            // 5. удаляем найденные точки из списка точек маршрута
            foreach($routePointsToDelete as $routePointToDelete)
                unset($routeData[$routePointToDelete->id]);

            // 6. корректируем дистанции в маршруте
            $arr_cities = array();

            foreach($routeData as $routePoint)
                array_push($arr_cities, $routePoint->cityId);

            $distanceList = GeoRouteHelper::GetDistanceList($arr_cities, $db);

            $orderNum = 1;
            $lastCityId = 0;

            foreach($routeData as $routePoint)
            {
                $distance = $distanceList->GetDistanceFromList($lastCityId, $routePoint->cityId);
                RouteHelper::UpdateRoutePointDistanceAndOrderNumber($routePoint->id, $distance, $orderNum++, $db);
                $lastCityId = $routePoint->cityId;
            }


            // 7. Получаем обновлённый маршрут
            $routePointList = CalculateRouteWebService::GetRouteData($accountId, $userTokenId, $db);

            // 8. получаем список городов для построенного маршрута
            $routeStartCities = RouteHelper::GetUniqueStartCitiesFromAjaxRoutePointsArray($routePointList->routePoints);
            $routeStartCitiesList = new AjaxCityList($routeStartCities);

            // 9. возвращаем ответ клиенту
            $responseData = new AjaxIdsListAndRoutePointList();
            $responseData->idsList = $data;
            $responseData->routePointList = $routePointList;
            $responseData->routeStartCitiesList = $routeStartCitiesList;
            $response = new AjaxServerResponse(200, '', '', $responseData);
            sendHTTPStatus(200);
            header('Content-type: application/json');
            echo json_encode($response);

        }
        catch(Exception $ex)
        {
            Log::writeSqlExeption($db, $ex);
            $this->returnError(500, array(1), $data);
        }
    }


}