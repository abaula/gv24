<?php
/**
 * Created by JetBrains PhpStorm.
 * User: Anton
 * Date: 28.02.15
 * Time: 23:35
 * To change this template use File | Settings | File Templates.
 */
require_once("WebServBase.module");
require_once("Headers.module");
require_once("Contract.module");


class SearchTasksWebService extends WebServBase
{

    public function onGet($args)
    {

        // TODO убрать эмуляцию задержки ответа сервера
        sleep(1);

        //var_dump($args);

        // проверяем авторизован ли пользователь
        if(true == CurrentUser::isAuthenticated())
        {
            // TODO получаем параметры поиска сохранённые в профиле пользователя

        }

        $db = SqlFactory::getSql();

        try
        {
            $page_arg = intval($args[0]);
            $page = $page_arg > 0 ? $page_arg : 1;

            // TODO Сделать проверку правильности номера страницы полученного с клиента

            $limit = 20;
            $offset = ($page - 1) * $limit;
            $allRowCount = 0;

            // получаем количество записей удовлетворяющих условию фильтрации
            $sql = 'SELECT count(id)
                    FROM cargo';

            $allRowCount = $db->getOne($sql);

            // получаем страницу данных
            $sql = 'SELECT C.id, GC1.name AS city1, GC2.name AS city2, CT.name AS type, C.weight, C.value, C.distance, C.cost, C.ready_date
                    FROM cargo C
	                INNER JOIN geocities GC1
                        ON GC1.id = C.city1_id
                    INNER JOIN geocities GC2
                        ON GC2.id = C.city2_id
                    INNER JOIN cargo_type CT
                        ON CT.id = C.cargo_type_id
                    LIMIT ?i, ?i';

            $result = $db->query($sql, $offset, $limit);

            if(false == $result)
            {
                $this->returnError(500, array(1));
            }
            else
            {
                $arr = array();

                while($row = $db->fetch($result))
                {
                    $rusReadyDate = Validators::convertMySqlDate2RusDate($row['ready_date']);

                    $entry = new AjaxTask
                    (
                        $row['id'], $row['city1'], $row['city2'], $row['type'], $row['weight'], $row['value'], $row['distance'], $row['cost'], $rusReadyDate
                    );

                    array_push($arr, $entry);
                }


                $respData = new AjaxTaskList();
                $respData->offset = $offset;
                $respData->limit = $limit;
                $respData->allRowCount = $allRowCount;
                $respData->page = $page;
                $respData->tasks = $arr;

                $response = new AjaxServerResponse(200, '', '', $respData);
                sendHTTPStatus(200);
                header('Content-type: application/json');
                echo json_encode($response);

            }



        }
        catch(Exception $ex)
        {
            Log::writeSqlExeption($db, $ex);
            $this->returnError(500, array(1));
        }


    }

    public function onPost($args, $data)
    {
        // TODO: Implement onPost() method.
    }

    public function onPut($args, $data)
    {
        // TODO: Implement onPut() method.
    }

    public function onDelete($args, $data)
    {
        // TODO: Implement onDelete() method.
    }
}