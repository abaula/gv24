<?php
/**
 * Created by JetBrains PhpStorm.
 * User: Anton
 * Date: 09.03.15
 * Time: 16:03
 * To change this template use File | Settings | File Templates.
 */
require_once("WebServBase.module");
require_once("Headers.module");
require_once("Contract.module");

class CargoSelectedWebService extends WebServBase
{

    public function onGet($args)
    {
        /*
         * Возвращаем список выбранных задач для пользователя
         *
         * */

        $accountId = null;
        $userTokenId = null;
        CurrentUser::FillUserIdentities($accountId, $userTokenId);


        // возвращаем объекты AjaxTask
        $db = SqlFactory::getSql();

        try
        {
            $page_arg = intval($args[0]);
            $page = $page_arg > 0 ? $page_arg : 1;

            // TODO Сделать проверку правильности номера страницы полученного с клиента

            $limit = 20;
            $offset = ($page - 1) * $limit;
            $allRowCount = 0;


            if(is_null($accountId))
                $where_sql_definition = $db->parse(' CS.user_token_id = ?i ', $userTokenId);
            else
                $where_sql_definition = $db->parse(' CS.account_id = ?i ', $accountId);

            // получаем количество записей удовлетворяющих условию фильтрации
            $sql = 'SELECT count(C.id)
                    FROM cargo C
                      INNER JOIN cargo_selected CS
                            ON CS.cargo_id = C.id
                              AND ?p
                    WHERE C.is_deleted = 0';

            $allRowCount = $db->getOne($sql, $where_sql_definition);


            $sql = 'SELECT C.id, C.city1_id, GC1.name AS city1, GC2.name AS city2, CT.name AS type,
                          C.weight, C.value, C.distance, C.cost, C.ready_date, CS.id AS selectedId
                    FROM cargo C
                        INNER JOIN geocities GC1
                            ON GC1.id = C.city1_id
                        INNER JOIN geocities GC2
                            ON GC2.id = C.city2_id
                        INNER JOIN cargo_type CT
                            ON CT.id = C.cargo_type_id
                        INNER JOIN cargo_selected CS
                            ON CS.cargo_id = C.id
                              AND ?p
                    WHERE C.is_deleted = 0';

            $result = $db->query($sql, $where_sql_definition);
            $arr = array();

            if(0 < $db->numRows($result))
            {
                $arr = array();

                while($row = $db->fetch($result))
                {
                    $rusReadyDate = Validators::convertMySqlDate2RusDate($row['ready_date']);

                    $entry = new AjaxTask
                    (
                        $row['id'], $row['city1_id'], $row['city1'], $row['city2'], $row['type'], $row['distance'], $row['value'], $row['weight'], $row['cost'], $rusReadyDate, true, $row['selectedId']
                    );

                    array_push($arr, $entry);
                }
            }

            // на данный момент информацию о страницах не заполняем, т.к. возвращаем все данные
            $respData = new AjaxTaskList();
            $respData->offset = $offset;
            $respData->limit = $limit;
            $respData->allRowCount = $allRowCount;
            $respData->page = $page;
            $respData->tasks = $arr;

            $response = new AjaxServerResponse(200, '', '', $respData);
            sendHTTPStatus(200);
            header('Content-type: application/json');
            echo json_encode($response);

        }
        catch(Exception $ex)
        {
            Log::writeSqlExeption($db, $ex);
            $this->returnError(500, array(1));
        }
    }

    public function onPost($args, $data)
    {
        // AjaxTaskInfoList
        // AjaxTaskInfo

        $accountId = null;
        $userTokenId = null;
        CurrentUser::FillUserIdentities($accountId, $userTokenId);


        $db = SqlFactory::getSql();

        try
        {
            if(is_null($accountId))
                $check_sql_definition = $db->parse(' AND user_token_id = ?i ', $userTokenId);
            else
                $check_sql_definition = $db->parse(' AND account_id = ?i ', $accountId);

            foreach($data->tasks as $task)
            {
                // страхуемся от внесения дублей в таблицу выбранных грузов
                $sql = 'SELECT id FROM cargo_selected WHERE cargo_id = ?i ?p';
                $result = $db->getOne($sql, $task->taskId, $check_sql_definition);

                if(empty($result))
                {
                    // вносим новую запись в таблицу выбранных грузов
                    $sql = 'INSERT INTO cargo_selected (cargo_id, account_id, user_token_id) VALUES ?p';

                    if(is_null($accountId))
                        $insert_sql_definition = $db->parse(' (?i, null, ?i) ', $task->taskId, $userTokenId);
                    else
                        $insert_sql_definition = $db->parse(' (?i, ?i, null) ', $task->taskId, $accountId);

                    $db->query($sql, $insert_sql_definition);
                }
            }


            $response = new AjaxServerResponse(200, '', '', $data);
            sendHTTPStatus(200);
            header('Content-type: application/json');
            echo json_encode($response);

        }
        catch(Exception $ex)
        {
            Log::writeSqlExeption($db, $ex);
            $this->returnError(500, array(1), $data);
        }
    }

    public function onPut($args, $data)
    {
        // HTTP/1.1 405 Method Not Allowed
        sendHTTPStatus(405);
        header('Allow: GET,POST,DELETE');
    }

    public function onDelete($args, $data)
    {
        // AjaxTaskInfoList
        // AjaxTaskInfo

        $accountId = null;
        $userTokenId = null;
        CurrentUser::FillUserIdentities($accountId, $userTokenId);


        $db = SqlFactory::getSql();

        try
        {
            if(is_null($accountId))
                $where_sql_definition = $db->parse(' user_token_id = ?i ', $userTokenId);
            else
                $where_sql_definition = $db->parse(' account_id = ?i ', $accountId);

            // 1. получаем все идентификаторы записей выбранных грузов для удаления
            $cargoIds = AjaxTaskInfoList::GetIds($data->tasks);
            $idsInSqlString = implode(',', $cargoIds);

            $sql = 'SELECT id FROM cargo_selected WHERE cargo_id IN(?p) AND ?p';
            $result = $db->query($sql, $idsInSqlString, $where_sql_definition);

            $ids_to_delete  = array();

            while($row = $db->fetch($result))
            {
                array_push($ids_to_delete, $row['id']);
            }



            // Удалять можно только задания которых нет в маршруте

            // 1. получаем id маршрута для пользователя
            $route_id = RouteHelper::GetRouteId($accountId, $userTokenId, $db);

            if(0 < $route_id)
            {
                // 2. получаем данные маршрута
                $routeData = RouteHelper::GetRouteData($route_id, $db);

                $isCargoIdsInRoute = RouteHelper::CheckCargoIdsExistInRoute($ids_to_delete, $routeData);

                if($isCargoIdsInRoute)
                {
                    // возвращаем ошибку
                    $this->returnError(400, array(1017), $data);
                    return;
                }

            }


            // 2. создаём список идентификаторов записей выбранных задач
            $cargo_selected_idsInSqlString = implode(',', $ids_to_delete);

            /*
            // 3. получаем id маршрута для пользователя
            $sql = 'SELECT id FROM route WHERE ?p';
            $route_id = $db->getOne($sql, $where_sql_definition);

            if(false != $route_id)
            {
                // 4. удаляем груз из маршрута
                $sql = 'DELETE FROM route_point WHERE route_id = ?i AND cargo_selected_id IN (?p)';
                $db->query($sql, $route_id, $cargo_selected_idsInSqlString);
            }
            */

            // 5. удаляем запись из таблицы выбранных грузов
            $sql = 'DELETE FROM cargo_selected WHERE id IN (?p) AND ?p';
            $db->query($sql, $cargo_selected_idsInSqlString, $where_sql_definition);


            $response = new AjaxServerResponse(200, '', '', $data);
            sendHTTPStatus(200);
            header('Content-type: application/json');
            echo json_encode($response);

        }
        catch(Exception $ex)
        {
            Log::writeSqlExeption($db, $ex);
            $this->returnError(500, array(1), $data);
        }
    }

}