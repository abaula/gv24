<?php
/**
 * Created by JetBrains PhpStorm.
 * User: Anton
 * Date: 07.06.15
 * Time: 11:55
 * To change this template use File | Settings | File Templates.
 */



/*
    Класс "муравей" сущность модели расчёта оптимального маршрута на основе генетического алгоритма "Муравьиный алгоритм"
*/
class Ant
{
    // ссылка на объект класса RouteCalculator
    private $_calculator;
    // список посещённых вершин
    private $_visitedVertices;
    // список выполняемых в текущий момент заданий на перевозку
    private $_commitedTasks;
    // Размер эллипса, для поиска попутных точек маршрутов
    private $_ellipseSize;
    // коэффициент Alpha, влияет на выбор муравьём очередного ребра для перехода
    private $_alpha;
    // коэффициент Beta, влияет на выбор муравьём очередного ребра для перехода
    private $_beta;
    // данные о текущей загрузке муравья - вес
    private $_curWeight;
    // данные о текущей загрузке муравья - объём
    private $_curValue;
    // построенный маршрут
    private $_route;

    function __construct($calculator, $alpha, $beta)
    {
        $this->_calculator = $calculator;
        $this->_ellipseSize = 0.2;
        $this->_alpha = $alpha;
        $this->_beta = $beta;
        $this->_curWeight = 0;
        $this->_curValue = 0;
        $this->_route = new Route();

        $this->_commitedTasks = array();
        $this->_visitedVertices = array();

        // инициализируем генератор случайных чисел
        self::_initRandomizer();
    }

    // муравей ищет путь
    function run($vertex)
    {
        // Всегда добавляем первую вершину маршрута
        $this->_route->setStartVertex($vertex);

        while (null != $vertex)
        {
            // обрабатываем событие посещения вершины A (загружаем муравья)
            $routeEntry = $this->_handleVertexAVisited($vertex);
            // отмечаем вершину как посещённую
            $this->_visitedVertices[$vertex->getId()] = $vertex;
            // получаем список возможных путей
            $edges = $this->_getAccessibleEdges($vertex);

            if (1 > count($edges))
            {
                // создаём путь домой и выходим
                $this->_addBackHomeEntry();
                break;
            }
            else
            {
                // получаем следующую вершину ребра маршрута
                $edge = $this->_selectEdgeToMove($vertex, $edges);
                $vertex = $edge->getAnotherVertex($vertex);
                // обрабатываем событие посещения вершины Б (разгружаем муравья)
                $this->_handleVertexBVisited($vertex, $edge, $routeEntry);
                // сохраняем часть маршрута
                $this->_route->addEntry($routeEntry);
            }
        }

        return true;
    }




    // Находится ли задание в работе
    private function _isRouteTaskCommited($task)
    {
        $commited = array_key_exists($task->getId(), $this->_commitedTasks);

        return $commited;
    }

    // добавляем отдельно в Route->Route отдельный Route->RouteEntry из последней точки маршрута к первой точке маршрута
    private function _addBackHomeEntry()
    {
        $startVertex = $this->_route->getStartVertex();
        $endVertex = $this->_route->getEndVertex();

        $edges = $endVertex->getEdges();

        foreach ($edges as $edge)
        {
            $anotherVertex = $edge->getAnotherVertex($endVertex);

            if ($anotherVertex->isEqual($startVertex))
            {
                $entry = new RouteEntry();
                $entry->setEdge($edge);
                $this->_route->setWayBackEntry($entry);
                break;
            }
        }
    }

    function getRoute()
    {
        return $this->_route;
    }

    // обработка события загрузки муравья, принятые к исполнению задания сохраняются в списке
    // если объём загрузки превышает лимиты, обрабатывает конфликт и помещает конфликтные маршруты в список Route->RouteEntry->_excludedTasks
    private function _handleVertexAVisited($vertex)
    {
        $entry = new RouteEntry();

        ///////////////////////////////////////////////////////////
        // выбираем все задания, для которых данная вершина является начальной точкой перевозки
        $selectedTaskList = array();

        $vertexTasks = $vertex->getRouteTasks();

        //print_r($vertex);
        //exit();

        $valueToLoad = 0;
        $weightToLoad = 0;

        foreach ($vertexTasks as $task)
        {
            if ($task->getVertexA()->isEqual($vertex))
            {

                $selectedTaskList[$task->getId()] = $task;
                // подсчитываем суммарные значения груза подлежащего загрузке
                $valueToLoad += $task->getValue();
                $weightToLoad += $task->getWeight();
            }
        }

        //print_r($selectedTaskList);
        //exit();

        $selectedTasks = array_values($selectedTaskList);

        ///////////////////////////////////////////////////////////
        // проверяем наличие конфликта по объёму и весу
        $valueLimit = $this->_calculator->getRestrictions()->getMaxValue();
        $weightLimit = $this->_calculator->getRestrictions()->getMaxWeight();

        // расчитываем значения перевозимого муравьём объёма и веса после погрузки всех заданий
        $valueAfterLoad = $this->_curValue + $valueToLoad;
        $weightAfterLoad = $this->_curWeight + $weightToLoad;

        if ($valueAfterLoad > $valueLimit || $weightAfterLoad > $weightLimit)
        {
            // обрабатываем конфликт
            $commitedTasks = $this->_resolveLoadingConflictByCriteria($selectedTasks);

            // если не удалось ничего погрузить по правилам разрешения конфликтов, то пытаемся погрузить хоть что-нибудь
            if (1 > count($commitedTasks))
            {
                $commitedTasks = $this->_resolveLoadingConflictByLoadingStrategy($selectedTasks);
            }

            // удаляем все принятые задания из общего списка заданий, в итоге в нём останутся только не принятые задания
            foreach ($commitedTasks as $task)
            {
                unset($selectedTaskList[$task->getId()]);
            }

            // после разрешения конфликта вносим в список все исключённые задания
            foreach ($selectedTaskList as $task)
            {
                $entry->addExcludedTask($task);
            }

            // правим ссылку на список принятых в работу заданий для дальнейшего использования
            $selectedTasks = $commitedTasks;
        }


        // принимаем в работу все задания, которые остались после обработки конфликта
        $valueToLoad = 0;
        $weightToLoad = 0;

        foreach ($selectedTasks as $task)
        {
            // отмечаем принятые в работы задания
            $this->_commitedTasks[$task->getId()] = $task;
            // отмечаем принятые в работы задания в части маршрута
            $entry->addCommitedTask($task);

            $valueToLoad += $task->getValue();
            $weightToLoad += $task->getWeight();
        }

        // обновляем текущие вес и объём перевозимые муравьём
        $this->_curValue += $valueToLoad;
        $this->_curWeight += $weightToLoad;

        return $entry;
    }


    // обработка события разгрузки муравья
    private function _handleVertexBVisited($vertex, $edge, $routeEntry)
    {
        // сохраняем ребро
        $routeEntry->setEdge($edge);

        ///////////////////////////////////////////////////////////
        // выбираем все задания, для которых данная вершина является конечной точкой перевозки
        // помещаем их в список выполненных заданий и разгружаем муравья
        $vertexTasks = $vertex->getRouteTasks();
        $valueToUnload = 0;
        $weightToUnload = 0;

        foreach ($vertexTasks as $task)
        {
            if ($task->getVertexB()->isEqual($vertex))
            {
                // если задание не было принято в работу, то пропускаем его
                if (false == array_key_exists($task->getId(), $this->_commitedTasks))
                    continue;

                // вносим в маршрут только те задания, которые были приняты в работу

                // удаляем принятое ранее в работу задание из списка
                unset($this->_commitedTasks[$task->getId()]);
                // вносим выполненное задание в часть маршрута
                $routeEntry->addFulfiledTask($task);
                // уменьшаем текущие значения загрузки муравья
                $this->_curValue -= $task->getValue();
                $this->_curWeight -= $task->getWeight();
            }
        }
    }


    // разрешаем конфликт при загрузке согласно установленным правилам, возвращаем задания, которые можно принять в работу
    private function _resolveLoadingConflictByCriteria($tasks)
    {
        // получаем правила
        $criteria = $this->_calculator->getRestrictions()->getConflictResolveCriteria();

        // сортируем по убыванию максимальной выручки
        if (ConflictResolveCriteria::MaxProceeds == $criteria)
            usort($tasks, 'Ant::_compareTaskForProceeds');

        // сортируем по убыванию максимальной стоимости за 1 км пути (максимальная прибыльность)
        if (ConflictResolveCriteria::MaxProfit == $criteria)
            usort($tasks, 'Ant::_compareTaskForProfit');

        // получаем список заданий которые можно взять в работу
        $acceptableTasks = $this->_pickupTasksWithLimits($tasks);

        return $acceptableTasks;
    }

    // разрешаем конфликт при загрузке согласно стратегии загрузки, возвращаем задания, которые можно принять в работу
    private function _resolveLoadingConflictByLoadingStrategy($tasks)
    {
        // получаем правила
        $strategy = $this->_calculator->getRestrictions()->getLoadingStrategy();

        // сортируем по возрастанию объёма
        if (LoadingStrategy::SavingValue == $strategy)
            usort($tasks, 'Ant::_compareTaskForSaveValue');

        // сортируем по возрастанию массы
        if (LoadingStrategy::SavingWeight == $strategy)
            usort($tasks, 'Ant::_compareTaskForSaveWeight');

        // получаем список заданий которые можно взять в работу
        $acceptableTasks = $this->_pickupTasksWithLimits($tasks);

        return $acceptableTasks;
    }

    // выбираем задачи в соответствии с установленным лимитом
    private function _pickupTasksWithLimits($tasks)
    {
        // рассчитываем лимиты на погрузку
        $valueLimit = $this->_calculator->getRestrictions()->getMaxValue();
        $weightLimit = $this->_calculator->getRestrictions()->getMaxWeight();
        // получаем значения свободного резерва веса и объёма
        $valueLimit -= $this->_curValue;
        $weightLimit -= $this->_curWeight;

        $result = array();

        foreach ($tasks as $task)
        {
            $valueLimit -= $task->getValue();
            $weightLimit -= $task->getWeight();

            // если превысили лимит, то останавливаемся
            if (0 > $valueLimit || 0 > $weightLimit)
                break;

            array_push($result, $task);
        }

        return $result;
    }




    // для сортировки заданий по критерию выручки - по убыванию
    private static function _compareTaskForProceeds($a, $b)
    {
        if ($a->getPrice() < $b->getPrice())
            return 1;

        if ($a->getPrice() > $b->getPrice())
            return -1;

        return 0;
    }

    // для сортировки заданий по критерию прибыльности - по убыванию
    private static function _compareTaskForProfit($a, $b)
    {
        if ($a->getProfit() < $b->getProfit())
            return 1;

        if ($a->getProfit() > $b->getProfit())
            return -1;

        return 0;
    }

    // для сортировки заданий по критерию экономии объёма - по возрастанию
    private static function _compareTaskForSaveValue($a, $b)
    {
        if ($a->getValue() > $b->getValue())
            return 1;

        if ($a->getValue() < $b->getValue())
            return -1;

        return 0;
    }

    // для сортировки заданий по критерию экономии веса (грузоподьёмности) - по возрастанию
    private static function _compareTaskForSaveWeight($a, $b)
    {
        if ($a->getWeight() > $b->getWeight())
            return 1;

        if ($a->getWeight() < $b->getWeight())
            return -1;

        return 0;
    }


    /*
        Возвращает все доступные для перехода точки маршрута
        с учётом ограничений

    ==========================
    ???? МАНИФЕСТ ????

    1) Составляем список возможных рёбер ранжируя по статусам: от "возможный для перехода", до "под вопросом для перехода"
     - Возможный для перехода - все рёбра ведущие к вершинам, при прибытии в которые не будет пропущен груз->
     - Под вопросом для перехода - все рёбра ведущие к вершинам при прибытии в которые будет пропущен груз->

    2) Если в списке нет вершин "возможный для перехода", то оставляем только одно ребро, переход по которому приведёт к минимальным потерям
    относительно других возможных переходов, а именно - эффективность маршрута начатого в этой вершине, должна быть больше чем эффективность пропущенного маршрута

    */
    private function _getAccessibleEdges($vertex)
    {
        $result = array();
        // список рёбер возможных для перехода
        $arr1 = array();
        // список рёбер под вопросом для перехода
        $arr2 = array();

        ////////////////////////////////////////////////////////
        // добавляем в результат доступные для посещения рёбра
        $edges = $vertex->getEdges();

        foreach ($edges as $edge)
        {
            $nextV = $edge->getAnotherVertex($vertex);

            // исключаем вершины, которые уже посещали
            if (array_key_exists($nextV->getId(), $this->_visitedVertices))
                continue;

            // для кажого ребра определены 2 возможных состояния после перехода по ребру:
            // 1) маршруты пропущены не будут
            // 1->1) можно выгрузить груз
            $canUnload = false;
            // 1->2) можно загрузить груз полностью
            $canLoadAll = false;
            // 2) будут пропущены маршруты
            // 2->1) можно загрузить груз частично
            $canLoadPart = false;
            // 2->2) приедем в конец маршрута задачи не посетив её начало
            $skipRoute = false;

            // лимиты на погрузку
            $valueLimit = $this->_calculator->getRestrictions()->getMaxValue();
            $weightLimit = $this->_calculator->getRestrictions()->getMaxWeight();

            // загрузка накапливается итогом
            $valueAfterLoad = 0;
            $weightAfterLoad = 0;

            // получаем список заданий для вершины перехода
            $vertexTasks = $nextV->getRouteTasks();

            foreach ($vertexTasks as $task)
            {
                //////////////////////////////////////////////////
                // сможем ли выгрузить груз в вершине перехода?
                if ($task->getVertexB()->isEqual($nextV))
                {
                    if ($this->_isRouteTaskCommited($task))
                        $canUnload = true;
                    else
                        $skipRoute = true;
                }

                //////////////////////////////////////////////////
                // сможем ли принять груз в вершине перехода?
                if ($task->getVertexA()->isEqual($nextV))
                {
                    // будем грузится в вершине, узнаем превысим лимиты или нет
                    $valueAfterLoad += $this->_curValue + $task->getValue();
                    $weightAfterLoad += $this->_curWeight + $task->getWeight();

                    if ($valueAfterLoad <= $valueLimit && $weightAfterLoad <= $weightLimit)
                    {
                        $canLoadAll = true;
                        $canLoadPart = false;
                    }
                    else
                    {
                        if ($canLoadAll)
                            $canLoadPart = true;

                        $canLoadAll = false;
                    }
                }
            }

            // можем загрузиться или разгрузиться ничего не пропустив
            if (($canLoadAll || $canUnload) && !$skipRoute)
                array_push($arr1, $edge);
            // можем загрузиться или разгрузиться пропустив маршрут
            else if (($canLoadAll || $canUnload) && $skipRoute)
                array_push($arr2, $edge);
            // можем загрузиться частично, а значит пропускаем маршрут
            else if ($canLoadPart)
                array_push($arr2, $edge);
        }

        // формируем результат
        if (0 < count($arr1))
            $result = $arr1;
        else if(0 < count($arr2))
        {
            $effEdge = $this->_getEffectiveEdge($vertex, $arr2);
            array_push($result, $effEdge);
        }

        return $result;
    }

    // выбираем ребро с наибольшей эффективностью из возможных, согласно установленных правил разрешения конфликтов
    private function _getEffectiveEdge($vertex, $edges)
    {
        $result = null;
        // сначала присваиваем самое малое значение
        $criteriaMaxValue = ~PHP_INT_MAX;

        foreach ($edges as $edge)
        {
            $nextV = $edge->getAnotherVertex($vertex);
            $criteriaValue = $this->_getProfitForVertex($nextV);

            if ($criteriaValue > $criteriaMaxValue)
            {
                $criteriaMaxValue = $criteriaValue;
                $result = $edge;
            }
        }

        return $result;
    }

    // получить оценку выгоды посещения вершины
    // рассчитывается как сумма выгод или выручки (в зависитмости от настроек разрешения конфликтов) всех заданий, которые могут быть начаты в вершине за вычетом
    // сумма выгод или выручки всех заданий, которые будут пропущены из за посещения вершины
    private function _getProfitForVertex($vertex)
    {
        $result = 0;
        $confResolveCriteria = $this->_calculator->getRestrictions()->getConflictResolveCriteria();

        // получаем список заданий для вершины перехода
        $vertexTasks = $vertex->getRouteTasks();

        foreach ($vertexTasks as $task)
        {
            $curValue = 0;

            if (ConflictResolveCriteria::MaxProceeds == $confResolveCriteria)
                $curValue = $task->getPrice();
            else if (ConflictResolveCriteria::MaxProfit == $confResolveCriteria)
                $curValue = $task->getProfit();

            if ($task->getVertexA()->isEqual($vertex))
            {
                $result += $curValue;
            }
            else if ($task->getVertexB()->isEqual($vertex))
            {
                // если задание не в работе, значит мы его пропустим посетив указанную вершину
                if (!$this->_isRouteTaskCommited($task))
                    $result -= $curValue;
            }
        }

        return $result;
    }

    private static function _initRandomizer()
    {
        mt_srand(crc32(microtime()));
    }

    private static function _getRandFloat()
    {
        return mt_rand() / mt_getrandmax();
    }


    // выбираем следующее ребро по которому будем двигаться
    private function _selectEdgeToMove($vertex, $edges)
    {
        $pheromones = $this->_calculator->getPheromones();

        // расчитываем числители
        $numerators = array();
        $denominator = 0;

        foreach ($edges as $edge)
        {
            $pheromoneE = $pheromones[$edge->getId()];

            //////////////////////////////////////
            // расчитаем вес вершины
            // Правило: чем меньше вес вершины, тем больше шансов она получает при выборе
            $edgeWeight = $edge->getDistance();

            // учитываем приоритет вершины (3 - самый высокий приоритет)
            // 3 = могу разгрузится и взять груз
            // 2 = могу только взять груз
            // 1 = могу только разгрузиться
            $nextVertex = $edge->getAnotherVertex($vertex);

            if ($nextVertex->hasRouteTaskRole(GVertexTaskRole::All))
            {
                $edgeWeight /= 3;
            }
            else if ($nextVertex->hasRouteTaskRole(GVertexTaskRole::Loading))
            {
                $edgeWeight /= 2;
            }

            $a1 = pow($pheromoneE, $this->_alpha);
            $a2 = 1 / pow($edgeWeight, $this->_beta);
            $numerator = $a1 + $a2;

            array_push($numerators, $numerator);
            $denominator += $numerator;
        }

        ////////////////////////////////////////////
        // рассчитываем возможности для каждого ребра (сумма всех возможностей ~ 1->0, +- погрешность при операциях с плавающей точкой)

        $possibilities = array();

        foreach ($numerators as $numerator)
        {
            $pos = $numerator / $denominator;
            array_push($possibilities, $pos);
        }

        //////////////////////////////////////////////
        // Теперь кидаем кубик и смотрим куда он попал

        $randNum = self::_getRandFloat();
        // По умолчанию выбираем последнюю вершину в массиве edges (нивелируем погрешность при операциях с плавающей точкой)
        $choosenEdge = $edges[count($possibilities) - 1];
        $pos2 = 0;

        for ($i = 0; $i < count($possibilities); $i++)
        {
            $pos2 += $possibilities[$i];

            if ($randNum < $pos2)
            {
                $choosenEdge = $edges[$i];
                break;
            }
        }

        // Находим вершину с приоритетом, если такая есть
        // Вершина с приоритетом - точка разгрузки лежащая на пути выбранного ребра, точнее сказать рядом, в эллипсе установленной величины
        // Смысл такой - если едем мимо точки разгрузки, то нужно немного отклониться и разгрузить муравья
        $choosenEdge = $this->_getEdgeWithPriority($choosenEdge, $vertex, $edges);

        // TODO если заехали в попутную точку, то нужно решить отмечаем её как посещённую или нет
        // - если забрали весь груз из попутной точки и не пропустили из-за посещения не один маршрут, то снова заезжать не имеет смысла
        // - иначе (остался незагруженный груз, или точка в которой завершаются другие маршруты) не отмечаем эту точку как посещённую, позже заедем ещё раз

        return $choosenEdge;
    }

    private function _getEdgeWithPriority($choosenEdge, $startVertex, $edges)
    {
        $resultEdges = array();
        $endVertex = $choosenEdge->getAnotherVertex($startVertex);

        // создаём эллипс для поиска входящих точек
        $ellipse = new GEOEllipse($startVertex->getGeoPoint(), $endVertex->getGeoPoint(), $this->_ellipseSize);

        /////////////////////////////////////////////////////////////////////////
        // Если есть точки разгрузки в элипсе, то выберем ближайшую из найденных
        foreach ($edges as $edge)
        {
            if ($choosenEdge->getId() == $edge->getId())
                continue;

            $v = $edge->getAnotherVertex($startVertex);

            ///////////////////////////////////////
            /// Если вершина v - это конечная точка маршрута и начальная точка маршрута уже пройдена (муравей загружен),
            /// то проверяем находится ли эта вершина в элипсе
            ///
            if($v->hasRouteTaskRole(GVertexTaskRole::Unloading))
            {
                if ($this->_hasVertexAnyCommitedTask($v, GVertexTaskRole::Unloading))
                {
                    // находится ли точка в элипсе?
                    $inEllipse = $ellipse->isPointInEllipse($v->getGeoPoint());

                    if ($inEllipse)
                        array_push($resultEdges, $edge);
                }
            }
        }

        // Если нашли ребра с приоритетом, то выберем ближайшее
        if (0 < count($resultEdges))
            $choosenEdge = $this->_getMinDistanceEdge($resultEdges);

        return $choosenEdge;
    }

    // возвращает вершину с минимальным расстоянием
    private function _getMinDistanceEdge($edges)
    {
        $result = null;
        $distance = 0;

        foreach ($edges as $edge)
        {
            if (0 == $distance || $distance > $edge->getDistance())
            {
                $distance = $edge->getDistance();
                $result = $edge;
            }
        }

        return $result;
    }

    // проверяет что указанная вершина связана с задачами, которые выполняются в данный момент
    // связь вершины с задачами должна соответствовать указанной роли
    private function _hasVertexAnyCommitedTask($vertex, $vertexRole)
    {
        $result = false;
        $tasks = $vertex->getRouteTasksForRole($vertexRole);

        foreach ($tasks as $task)
        {
            $commited = $this->_isRouteTaskCommited($task);

            if ($commited)
            {
                $result = true;
                break;
            }
        }

        return $result;
    }

}